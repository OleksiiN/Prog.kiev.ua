import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

/**
 * Created by Artem on 28.04.2015.
 */
public class SortBenchmark {
    public static void main(String[] args) {
        int choice = -1;
        int size = 0;
        int nsort = 0;
        int alg = 0;
        int[] sortarr;


        System.out.println("Press \"1\" for one algorithm benchmark and \"2\" for all algorithms:");
        choice = CheckEnteredBenchmark(choice);
        Scanner scanner = new Scanner(System.in);
        if (choice == 1) {
            System.out.println("Please choose algorithm:");
            System.out.println("   Press \"1\" for algorithm \"Sort with flag\" ");
            System.out.println("   Press \"2\" for algorithm \"Select sort\" ");
            System.out.println("   Press \"3\" for algorithm \"Insert sort\" ");
            System.out.println("   Press \"4\" for algorithm \"Array sort\" ");
            alg = scanner.nextInt();

            System.out.println("Please enter SIZE of ARRAY: ");
            size = scanner.nextInt();
            System.out.println("Please enter number of sorting: ");
            nsort = scanner.nextInt();
            int[] array = new int[size];
            randomFillArray(array, -1000, 1000);
            sortarr = array;
            Arrays.sort(sortarr);

            if (alg == 1) {
                SortWithFlagShow(nsort, sortarr, BackArray(sortarr), array);
            }
            if (alg == 2) {
                SortSelectShow(nsort, sortarr, BackArray(sortarr), array);
            }
            if (alg == 3) {
                SortInsertShow(nsort, sortarr, BackArray(sortarr), array);
            }
            if (alg == 4) {
                SortArrayShow(nsort, sortarr, BackArray(sortarr), array);
            }
        }

        if (choice == 2) {
            System.out.println("Please enter SIZE of ARRAY: ");
            size = scanner.nextInt();
            System.out.println("Please enter number of sorting: ");
            nsort = scanner.nextInt();
            int[] array = new int[size];
            randomFillArray(array, -1000, 1000);
            sortarr = array;
            Arrays.sort(sortarr);

            BestSortShow(SortWithFlagShow(nsort, sortarr, BackArray(sortarr), array));
            BestSortShow(SortSelectShow(nsort, sortarr, BackArray(sortarr), array));
            BestSortShow(SortInsertShow(nsort, sortarr, BackArray(sortarr), array));
            BestSortShow(SortArrayShow(nsort, sortarr, BackArray(sortarr), array));

        }
    }

    private static void BestSortShow(long[] BestTimeArray) {
        if (BestTimeArray[0] < BestTimeArray[1] && BestTimeArray[0] < BestTimeArray[2]) {
            System.out.println(" Best time is for non-sort array");
        }
        if (BestTimeArray[1] < BestTimeArray[0] && BestTimeArray[1] < BestTimeArray[2]) {
            System.out.println(" Best time is for sort array");
        }
        if (BestTimeArray[2] < BestTimeArray[0] && BestTimeArray[2] < BestTimeArray[1]) {
            System.out.println(" Best time is for back sort array");
        }
        if (BestTimeArray[0] == BestTimeArray[1] && BestTimeArray[0] < BestTimeArray[2]) {
            System.out.println(" Best time is for non-sort array and sort array");
        }
        if (BestTimeArray[0] == BestTimeArray[2] && BestTimeArray[0] < BestTimeArray[1]) {
            System.out.println(" Best time is for non-sort array and back sort array");
        }
        if (BestTimeArray[1] == BestTimeArray[2] && BestTimeArray[1] < BestTimeArray[0]) {
            System.out.println(" Best time is for non-sort array and back sort array");
        }
        if (BestTimeArray[1] == BestTimeArray[2] && BestTimeArray[1] == BestTimeArray[0]) {
            System.out.println(" All array has identical time");
        }
        System.out.println();
    }

    private static long[] SortArrayShow(int nsort, int[] sortarr, int[] backsortarr, int[] array) {
        System.out.println("Algorithm - Array sort:");
        long temp1 = ArraySortTime(nsort, array);
        System.out.println("   Time for non-sort array - " + temp1 + ", average time - " + temp1 / nsort);
        long temp2 = ArraySortTime(nsort, sortarr);
        System.out.println("   Time for sort array - " + temp2 + ", average time - " + temp2 / nsort);
        long temp3 = ArraySortTime(nsort, backsortarr);
        System.out.println("   Time for back sort array - " + temp3 + ", average time - " + temp3 / nsort);
        long[] BestTimeArray = {temp1, temp2, temp3};
        return BestTimeArray;
    }

    private static long[] SortInsertShow(int nsort, int[] sortarr, int[] backsortarr, int[] array) {
        System.out.println("Algorithm - Insert sort:");
        long temp1 = InsertSortTime(nsort, array);
        System.out.println("   Time for non-sort array - " + temp1 + ", average time - " + temp1 / nsort);
        long temp2 = InsertSortTime(nsort, sortarr);
        System.out.println("   Time for sort array - " + temp2 + ", average time - " + temp2 / nsort);
        long temp3 = InsertSortTime(nsort, backsortarr);
        System.out.println("   Time for back sort array - " + temp3 + ", average time - " + temp3 / nsort);
        long[] BestTimeArray = {temp1, temp2, temp3};
        return BestTimeArray;
    }

    private static long[] SortSelectShow(int nsort, int[] sortarr, int[] backsortarr, int[] array) {
        System.out.println("Algorithm - Select sort:");
        long temp1 = SelectSortTime(nsort, array);
        System.out.println("   Time for non-sort array - " + temp1 + ", average time - " + temp1 / nsort);
        long temp2 = SelectSortTime(nsort, sortarr);
        System.out.println("   Time for sort array - " + temp2 + ", average time - " + temp2 / nsort);
        long temp3 = SelectSortTime(nsort, backsortarr);
        System.out.println("   Time for back sort array - " + temp3 + ", average time - " + temp3 / nsort);
        long[] BestTimeArray = {temp1, temp2, temp3};
        return BestTimeArray;
    }

    private static long[] SortWithFlagShow(int nsort, int[] sortarr, int[] backsortarr, int[] array) {
        System.out.println("Algorithm - Sort with Falg:");
        long temp1 = SortWithFlagTime(nsort, array);
        System.out.println("   Time for non-sort array - " + temp1 + ", average time - " + temp1 / nsort);
        long temp2 = SortWithFlagTime(nsort, sortarr);
        System.out.println("   Time for sort array - " + temp2 + ", average time - " + temp2 / nsort);
        long temp3 = SortWithFlagTime(nsort, backsortarr);
        System.out.println("   Time for back sort array - " + temp3 + ", average time - " + temp3 / nsort);
        long[] BestTimeArray = {temp1, temp2, temp3};
        return BestTimeArray;
    }

    private static int[] BackArray(int[] array) {
        int[] backsortarr = array;
        for (int i = 0; i < backsortarr.length / 2; i++) {
            int tmp = backsortarr[i];
            backsortarr[i] = array[backsortarr.length - i - 1];
            backsortarr[backsortarr.length - i - 1] = tmp;
        }
        return backsortarr;
    }

    private static int CheckEnteredBenchmark(int choice) {
        while (choice != 1 || choice != 2) {
            Scanner scanner = new Scanner(System.in);
            if (scanner.hasNextInt()) {
                choice = scanner.nextInt();
                if (choice == 1 || choice == 2) break;
                else {
                    System.out.println("Please make correct choice");
                    System.out.println("Press \"1\" for one algorithm benchmark and \"2\" for all algoritms");
                }
            } else {
                System.out.println("Please make correct choice");
                System.out.println("Press \"1\" for one algorithm benchmark and \"2\" for all algoritms");
            }
        }
        return choice;
    }

    private static long ArraySortTime(int nsort, int[] array) {
        int[] arr;
        long start = System.currentTimeMillis();
        for (int i = 0; i <= nsort; i++) {
            arr = array;
            Arrays.sort(arr);
        }
        long finish = System.currentTimeMillis();
        return finish - start;
    }


    private static long InsertSortTime(int nsort, int[] array) {
        int[] arr;
        long start = System.currentTimeMillis();
        for (int i = 0; i <= nsort; i++) {
            arr = array;
            insertSort(arr);
        }
        long finish = System.currentTimeMillis();
        return finish - start;
    }

    private static long SelectSortTime(int nsort, int[] array) {
        int[] arr;
        long start = System.currentTimeMillis();
        for (int i = 0; i <= nsort; i++) {
            arr = array;
            selectSort(arr);
        }
        long finish = System.currentTimeMillis();
        return finish - start;
    }

    private static long SortWithFlagTime(int nsort, int[] array) {
        int[] arr;
        long start = System.currentTimeMillis();
        for (int i = 0; i <= nsort; i++) {
            arr = array;
            exchangeSortWithFlag(arr);
        }
        long finish = System.currentTimeMillis();
        return finish - start;
    }

    private static void randomFillArray(int[] array, int min, int max) {
        Random random = new Random();
        for (int i = 0; i < array.length; i++) {
            int randomNumber = min + random.nextInt(max - min + 1);
            array[i] = randomNumber;
        }
    }

    private static void exchangeSortWithFlag(int[] array) {
        boolean Flag = false;
        do {
            Flag = false;
            for (int i = 0; i < array.length - 1; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    Flag = true;
                }
            }
        } while (Flag);
    }

    private static void selectSort(int[] array) {
        int v = 0;
        int v1;
        for (int i = 0; i < array.length; i++) {
            int min = array[i];
            for (int z = i; z < array.length; z++) {
                if (min > array[z]) {
                    min = array[z];
                    v = z;
                }
            }
            v1 = array[i];
            array[i] = array[v];
            array[v] = v1;
        }
    }

    private static void insertSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            for (int z = i; z > 0 && array[z - 1] > array[z]; z--) {
                int v = array[z - 1];
                array[z - 1] = array[z];
                array[z] = v;
            }
        }
    }

}

